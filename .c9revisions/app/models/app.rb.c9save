{"ts":1368982958644,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Interface:\n# app.users\n# app.developer\nclass App < ActiveRecord::Base\n  extend FriendlyId\n  friendly_id :name, :use => :scoped, :scope => :developer_id\n\n  attr_accessible :name, :icon, :fbid\n\n  belongs_to :developer\n  has_many :leaderboards, :dependent => :destroy\n  has_many :achievements, :dependent => :destroy\n\n  # This can leave users in the system that are not referenced by anything.\n  # That's alright, we'll kill them with a maintenance task.\n  has_many :subscriptions, :dependent => :destroy\n  has_many :users, :through => :subscriptions\n\n  before_create :set_app_key\n\n  validates_presence_of :name\n  validates_uniqueness_of :name, :scope => :developer_id\n  has_attached_file :icon, :default_url => '/assets/app_icon.png'\n\n\n  # First, see if the user already exists for the developer of this app. If it\n  # does, create a subscription to current_app for this user.  If it does not,\n  # create both the user and the subscription.\n  def find_or_create_subscribed_user(user_params)\n    u = (user_params[:fb_id]      && developer.users.find_by_fb_id(user_params[:fb_id].to_i)) ||\n        (user_params[:twitter_id] && developer.users.find_by_twitter_id(user_params[:twitter_id].to_i)) ||\n        (user_params[:google_id]  && developer.users.find_by_google_id(user_params[:google_id].to_i)) ||\n        (user_params[:custom_id]  && developer.users.find_by_custom_id(user_params[:custom_id].to_i)) ||\n\n    if !u\n      u = developer.users.create(user_params)\n    end\n\n    if u.errors.count == 0\n      u.apps << self unless u.apps.include?(self)\n    end\n\n    u\n  end\n\n  private\n  def set_app_key\n    begin\n      self.app_key = ::RandomGen.alphanumeric_string(10 + (rand() * 10).ceil)\n    end until App.count(:conditions => {:app_key => self.app_key}) == 0\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":1768}]],"length":1768}

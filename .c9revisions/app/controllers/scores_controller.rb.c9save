{"ts":1368976084351,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class ScoresController < ApplicationController\n  before_filter :set_headers\n  before_filter :require_dashboard_access, :only   => [:destroy]\n  before_filter :require_api_access,       :except => [:destroy]\n  before_filter :set_leaderboard,          :except => [:destroy]\n\n  private\n  def set_headers\n    headers['Access-Control-Allow-Origin'] = '*'\n    headers['Access-Control-Expose-Headers'] = 'ETag'\n    headers['Access-Control-Allow-Methods'] = 'GET, POST, PATCH, PUT, DELETE, OPTIONS, HEAD'\n    headers['Access-Control-Allow-Headers'] = '*,x-requested-with,Content-Type,If-Modified-Since,If-None-Match'\n    headers['Access-Control-Max-Age'] = '86400'\n  end\n\n\n  def index\n    since = params[:since] && Time.parse(params[:since].to_s)\n    user_id = params[:user_id].to_i\n    @scores = @leaderboard.top_scores_with_users_best(user_id, since)\n    ActiveRecord::Associations::Preloader.new(@scores, [:user]).run\n\n    respond_to do |format|\n      format.html # index.html.erb\n      format.json { render json: @scores.to_json(:include => :user, :methods => [:rank, :value]) }\n    end\n  end\n\n  def show\n    @score = @leaderboard.scores.find(params[:id].to_i)\n\n    respond_to do |format|\n      format.html # show.html.erb\n      format.json { render json: @score }\n    end\n  end\n\n  def create\n    err_message = nil\n    user_id = params[:score].delete(:user_id)\n    err_message = \"Please pass a user_id with your score.\"  if user_id.blank?\n\n    if !err_message\n      user = user_id && current_app.users.find_by_id(user_id.to_i)\n    end\n\n    err_message = \"User with that ID is not subscribed to this app.\"  if !user\n    if !err_message\n      value = params[:score].delete(:value)\n      @score = @leaderboard.scores.build(params[:score])\n      @score.value = value\n      @score.user = user\n      if !@score.save\n        err_message = \"#{@score.errors.full_messages.join(\", \")}\"\n      end\n    end\n\n    if err_message\n      render status: :bad_request, json: {message: err_message}\n    else\n      render json: @score, location: @score\n    end\n  end\n\n  def destroy\n    @score = Score.find(params[:id].to_i)\n    if current_developer.authorized_to_delete_score?(@score)\n      @score.destroy\n      redirect_to scores_url, notice: \"Score was deleted.\"\n    else\n      redirect_to root_url, notice: \"You can't delete that score.\"\n    end\n  end\n\n  private\n  def set_leaderboard\n    l_id1 = params[:score] && params[:score].delete(:leaderboard_id)\n    l_id2 = params.delete(:leaderboard_id)\n    if(leaderboard_id = l_id1 || l_id2)\n      @leaderboard = current_app.leaderboards.find_by_id(leaderboard_id.to_i)\n    end\n\n    unless @leaderboard\n      render status: :forbidden, json: {message: \"Pass a leaderboard_id that belongs to the app associated with app_key\"}\n    end\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":2764}]],"length":2764}

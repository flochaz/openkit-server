{"ts":1371035573085,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class ApplicationController < ActionController::Base\n  protect_from_forgery\n  before_filter :set_headers\n  before_filter :set_access\n  helper_method :current_developer\n\n  private\n  def set_headers\n    headers['Access-Control-Allow-Origin'] = '*'\n    headers['Access-Control-Expose-Headers'] = 'ETag'\n    headers['Access-Control-Allow-Methods'] = 'GET, POST, PATCH, PUT, DELETE, OPTIONS, HEAD'\n    headers['Access-Control-Allow-Headers'] = '*,x-requested-with,Content-Type,If-Modified-Since,If-None-Match'\n    headers['Access-Control-Max-Age'] = '86400'\n  end\n\n\n  private\n  def current_developer_session\n    return @current_developer_session if defined?(@current_developer_session)\n    @current_developer_session = DeveloperSession.find\n  end\n\n  def current_developer\n    return @current_developer if defined?(@current_developer)\n    @current_developer = @access[:dashboard] && @access[:dashboard][:developer]\n  end\n\n  def current_app\n    return @current_app if defined?(@current_app)\n    @current_app = @access[:api] && @access[:api][:app]\n  end\n\n  def require_dashboard_access\n    unless current_developer\n      respond_to do |format|\n        format.html {\n          store_location\n          redirect_to login_path, notice: \"You must be logged in to do that\"\n        }\n        format.json {\n          render status: :forbidden, json: { message: \"This action is only available through the developer dashboard.\" }\n        }\n      end\n    end\n  end\n\n  def require_api_access\n    if current_app\n      if !accepts_json?\n        render status: :bad_request, json: {message: %(Client must accept JSON.  Set the 'Accepts' header on your HTTP request to \"application/json\")}\n      end\n    else\n      respond_to do |format|\n        format.html {\n          render status: :forbidden, text: \"Requires API Access\"\n        }\n        format.json {\n          message = params[:app_key] ? \"Could not find an app by that app_key PARAMS: #{params.inspect}\"\n                                     : \"Please pass an app_key with your request. PARAMS: #{params.inspect}\"\n          render status: :forbidden, json: {message: message}\n        }\n      end\n    end\n  end\n\n  def require_dashboard_or_api_access\n    unless current_app || current_developer\n      respond_to do |format|\n        format.html {\n          store_location\n          redirect_to login_path, notice: \"You must be logged in to do that\"\n        }\n        format.json {\n          render status: :forbidden, json: {message: \"Please pass app_key with request\"}\n        }\n      end\n    end\n  end\n\n  def set_access\n    @access = {}\n    if params[:app_key]\n      @access[:api] = {}\n      @access[:api][:app] = App.find_by_app_key(params[:app_key].to_s)\n    else\n      @access[:dashboard] = {}\n      @access[:dashboard][:developer] = current_developer_session && current_developer_session.record\n    end\n  end\n\n  def api_request?\n    @access[:api]\n  end\n\n  def store_location\n    session[:return_to] = request.path\n  end\n\n  def redirect_back_or_default(default)\n    redirect_to(session[:return_to] || default)\n    session[:return_to] = nil\n  end\n\n  def content_type_json?\n    request.content_type == \"application/json\"\n  end\n\n  def accepts_json?\n    request.accepts.include?(\"application/json\")\n  end\n\n  def request_base_uri\n    request.protocol + request.host_with_port\n  end\n\n  def set_app\n    if api_request?\n      @app = current_app\n    else\n      @app = current_developer.apps.find(params[:app_id].to_s)  # to_s because we use slug on app\n    end\n\n    if !@app\n      respond_to do |format|\n        format.html { render status: :forbidden, text: \"Forbidden\" }\n        format.json { render status: :forbidden, json: {message: \"Please check your app_key.\"} }\n      end\n    end\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":3725}]],"length":3725}

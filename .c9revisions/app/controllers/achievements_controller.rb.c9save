{"ts":1371035246915,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class AchievementsController < ApplicationController\n  before_filter :require_dashboard_or_api_access, :only   => [:index, :create, :facebook]\n  before_filter :require_dashboard_access,        :except => [:index, :create, :facebook]\n  before_filter :set_app\n  layout \"facebook\",    :only   => [:facebook]\n  layout \"application\", :except => [:facebook]\n\n\n  def index\n    @achievements = @app.achievements\n    user_id = params[:user_id] && params[:user_id].to_i\n    respond_to do |format|\n      format.html\n      format.json {\n        render json: @achievements.map {|x| x.api_fields(request_base_uri, user_id)}\n      }\n    end\n  end\n\n\n  # Dash only\n  def show\n    @achievement = @app.achievements.find(params[:id].to_i)\n    @achievement_scores = @achievement.best_scores\n    ActiveRecord::Associations::Preloader.new(@best__scores, [:user]).run\n\n    respond_to do |format|\n      format.html # show.html.erb\n      format.json { render json: @achievement.api_fields(request_base_uri) }\n    end\n  end\n\n  # GET /achievement_scores/1\n  def facebook\n    #@achievements = @app.achievements\n    @achievement = @app.achievements.find(params[:achievement_id].to_i)\n    #@top_scores = Score.bests_for('all_time', @achievement.id)\n    #ActiveRecord::Associations::Preloader.new(@top_scores, [:user]).run\n\n    respond_to do |format|\n      format.html # facebook.html.erb\n      format.json { render json: @achievement.api_fields(request_base_uri) }\n    end\n  end\n\n\n  # Dash only\n  def new\n    @achievement = @app.achievements.build\n\n    respond_to do |format|\n      format.html # new.html.erb\n      format.json { render json: @achievement.api_fields(request_base_uri) }\n    end\n  end\n\n  # Dash only\n  def edit\n    @achievement = @app.achievements.find(params[:id].to_i)\n  end\n\n  def create\n    @achievement = @app.achievements.new(params[:achievement])\n\n    respond_to do |format|\n      if @achievement.save\n        format.html { redirect_to [@app, @achievement], notice: 'Achievement was successfully created.' }\n        format.json { render json: @achievement.api_fields(request_base_uri), status: :created, location: [@app, @achievement] }\n      else\n        format.html { render action: \"new\" }\n        format.json { render json: @achievement.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # Dash only\n  def update\n    params[:achievement].delete(:app_id)\n    @achievement = @app.achievements.find(params[:id].to_i)\n\n    respond_to do |format|\n      if @achievement.update_attributes(params[:achievement])\n        format.html { redirect_to [@app, @achievement], notice: 'Achievement was successfully updated.' }\n        format.json { head :no_content }\n      else\n        format.html { render action: \"edit\" }\n        format.json { render json: @achievement.errors, status: :unprocessable_entity }\n      end\n    end\n  end\n\n  # Dash only\n  def destroy\n    @achievement = @app.achievements.find_by_id(params[:id].to_i)\n    if @achievement\n      @achievement.destroy\n      notice = \"Destroyed achievement.\"\n    else\n      notice = \"Achievement doesn't exist.\"\n    end\n\n    respond_to do |format|\n      format.html { redirect_to app_achievements_url(@app), notice: notice }\n      format.json { head :no_content }\n    end\n  end\n\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":3237}]],"length":3237}
